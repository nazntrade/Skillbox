<resources>
    <string name="app_name">Hw16Lists1</string>
    <string name="dialog_window_kitten">Congratulations, a new kitten has appeared in the store. Enter his details.</string>
    <string name="breed_hint">Breed</string>
    <string name="name_hint">Name</string>
    <string name="article">articles IT</string>
    <string name="list">Pet shop</string>
    <string name="s.o.l.i.d.">S.O.L.I.D.
        Актуальность принципов SOLID.
        Перевод
Автор оригинала: Robert C. Martin (Uncle Bob)
Впервые принципы SOLID были представлены в 2000 году в статье Design Principles and Design Patterns Роберта Мартина, также известного как Дядюшка Боб.

С тех пор прошло два десятилетия. Возникает вопрос - релевантны ли эти принципы до сих пор?

Перед вами перевод статьи Дядюшки Боба, опубликованной в октябре 2020 года, в которой он рассуждает об актуальности принципов SOLID для современной разработки.

Недавно я получил письмо с примерно следующими соображениями:

Годами знание принципов SOLID было стандартом при найме. От кандидатов ожидалось уверенное владение этими принципами. Однако позже один из наших менеджеров, который уже почти не пишет код, усомнился, разумно ли это. Он утверждал, что принцип открытости-закрытости стал менее важен, так как по большей части мы уже не пишем код для крупных монолитов. А вносить изменения в компактные микросервисы - безопасно и просто.

Принцип подстановки Лисков давно устарел, потому что мы уже не уделяем столько внимания наследованию, сколько уделяли 20 лет назад. Думаю, нам стоит рассмотреть позицию Дена Норса о SOLID - “Пишите простой код”

В ответ я написал следующее письмо.

Принципы SOLID сегодня остаются такими же актуальными, как они были 20 лет назад (и до этого). Потому что программное обеспечение не особо изменилось за все эти годы, а это в свою очередь следствие того, что программное обеспечение не особо изменилось с 1945 года, когда Тьюринг написал первые строки кода для электронного компьютера. Программное обеспечение - это все еще операторы if, циклы while и операции присваивания - Последовательность, Выбор, Итерация.

Каждому новому поколению нравится думать, что их мир сильно отличается от мира поколения предыдущего. Каждое новое поколение ошибается в этом, о чем они узнают, как только появляется следующее поколение, чтобы сказать им, насколько все изменилось.

Итак, пройдемся по принципам по порядку.

SRP - Single Responsibility Principle Принцип единственной ответственности.

Объединяйте вещи, изменяющиеся по одним причинам. Разделяйте вещи, изменяющиеся по разным причинам.

Трудно представить, что этот принцип не релевантен при разработке ПО. Мы не смешиваем бизнес-правила с кодом пользовательского интерфейса. Мы не смешиваем SQL-запросы с протоколами взаимодействия. Код, меняющийся по разным причинам, мы держим отдельно, чтобы изменения не сломали другие части. Мы следим, чтобы модули, которые изменяются по разным причинам, не включали запутывающих зависимостей.

Микросервисы не решают эту проблему. Вы можете создать запутанный микросервис или запутанное множество микросервисов, если смешаете код, который изменяется по разным причинам.

Слайды Дена Норса полностью упускают этот момент и убеждают меня в том, что он вообще не понимает сам принцип (либо иронизирует, что более вероятно предположить, зная Дена). Его ответ на SRP - “Пишите простой код”. Я согласен. SRP - один из способов сохранять код простым.

OSP - Open-Closed Principle Принцип открытости-закрытости

Модуль должен быть открытым для расширения, но закрытым для изменения.

Мысль о том, что из всех принципов кто-то может подвергнуть сомнению этот, наполняет меня ужасом за будущее нашей отрасли. Конечно, мы хотим создавать модули, которые можно расширять, не изменяя их. Можете ли вы представить себе работу в зависимой от устройства системе, где запись в файл на диске принципиально отличается от вывода на принтер, печати на экран или записи в канал? Хотим ли мы видеть операторы if, разбросанные по всему коду, и вникать сразу во все мельчайшие детали?

Или… хотим ли мы отделить абстрактные понятия от деталей реализации? Хотим ли мы изолировать бизнес-правила от надоедливых мелких деталей графического интерфейса, протоколов связи микросервисов и тонкостей поведения различных баз данных? Конечно хотим!

И снова слайд Дэна преподносит это совершенно неправильно.

(Примечание. На слайде Ден утверждает, что при изменении требований существующий код становится неверным, и его нужно заменить на работающий)

При изменении требований неверна только часть существующего кода. Бóльшая часть существующего кода по-прежнему верна. И мы хотим убедиться, что нам не нужно менять правильный код только для того, чтобы снова заставить работать неправильный. Ответ Дэна - “Пишите простой код”. И снова я согласен. По иронии, он прав. Простой код одновременно открыт и закрыт.

LSP - Liskov Substitution Principle Принцип подстановки Лисков

Программа, использующая интерфейс, не должна путаться в реализациях этого интерфейса.

Люди (включая меня) допустили ошибку, полагая что речь идет о наследовании. Это не так. Речь о подтипах. Все реализации интерфейсов являются подтипами интерфейса, в том числе при утиной типизации. Каждый пользователь базового интерфейса, объявлен этот интерфейс или подразумевается, должен согласиться с его смыслом. Если реализация сбивает с толку пользователя базового типа, то будут множиться операторы if/switch.

Этот принцип - о сохранении абстракций четкими и хорошо определенными. Невозможно вообразить такую концепцию устаревшей.

Слайды Дэна по этой теме полностью верны, он просто упустил суть принципа. Простой код - это код, который поддерживает четкие отношения подтипов.

ISP - Interface Segregation Principle Принцип разделения интерфейса

Интерфейсы должны быть краткими, чтобы пользователи не зависели от ненужных им вещей.

Мы по-прежнему работаем с компилируемыми языками. Мы все еще зависим от дат изменений, чтобы определить, какие модули должны быть перекомпилированы и перевыпущены. Покуда это справедливо, нам придется столкнуться с проблемой - когда модуль A зависит от модуля B во время компиляции, но не во время выполнения, изменения в модуле B ведут к перекомпиляции и перевыпуску модуля A.

Проблема особенно остро стоит в статически типизированных языках, таких как Java, C#, C++, GO, Swift и т.д. Динамически типизированные языки страдают гораздо меньше, но тоже не застрахованы от этого - существование Maven и Leiningen тому доказательство.

Слайд Дэна на эту тему ошибочен.

(Примечание. На слайде Ден обесценивает утверждение “Клиенты не должны зависеть от методов, которые они не используют” фразой “Это же и так правда!!”)

Клиенты зависят от методов, которые они не вызывают, если нужно перекомпилировать и перевыпускать клиент при изменении одного из этих методов. Финальное замечание Дэна по этому принципу в целом справедливо.

(Примечание. Речь о фразе “Если классу нужно много интерфейсов - упрощайте класс!”)

Да, если вы можете разбить класс с двумя интерфейсами на два отдельных класса, то это хорошая идея (SRP). Но такое разделение часто недостижимо и даже нежелательно.

DIP - Dependency Inversion Principle Принцип инверсии зависимостей

Направляйте зависимости согласно абстракциям. Высокоуровневые модули не должны зависеть от низкоуровневых деталей.

Сложно представить архитектуру, которая активно не использовала бы этот принцип. Мы не хотим зависимости бизнес-правил высокого уровня от низкоуровневых деталей. Это, надеюсь, совершенно очевидно. Мы не хотим, чтобы вычисления, которые приносят нам деньги, были замусорены SQL-запросами, проверками низкого уровня или проблемами форматирования. Мы хотим изолировать абстракции высокого уровня от низкоуровневых деталей. Это разделение достигается за счет аккуратного управления зависимостями внутри системы, чтобы все зависимости исходного кода, особенно те, которые пересекают архитектурные границы, указывали на абстракции высокого уровня, а не на низкоуровневые детали.

В каждом случае слайды Дена заканчиваются фразой “Пишите простой код”. Это хороший совет. Однако если годы и научили нас чему-то, так это тому, что простота требует дисциплины, руководствующейся принципами. Именно эти принципы определяют простоту. Именно эта дисциплина заставляют программистов создавать простой код.

Лучший способ создать путаницу - сказать всем “будьте проще” и не дать никаких дальнейших инструкций. </string>

    <string name="clean_code">Clean code.
        Качество продукта напрямую зависит от того, из чего и каким образом его делают. Написание программного кода – не исключение: за его качеством необходимо следить на каждом этапе разработки. Это позволит сделать продукт надежным и избавит вас от необходимости регулярно обращаться к разработчикам, чтобы что-нибудь пофиксить. Давайте обсудим, что такое чистый код, как его создать и почему он так важен.

Что такое качественный код
Брэм Коэн, автор BitTorrent, писал: «То, что мог бы написать любой идиот, обычно имеет качество написанного идиотом». И действительно, несмотря на постоянное пополнение рядов программистов, качеством кода могут похвастаться не все.

Отличительные признаки хорошего кода:

Читаемость – не только для компьютера, но и для людей. Это позволит менять, дополнять и исправлять код даже тем, кто видит его первый раз.
Стабильность. Избежать багов получается не всегда, но даже в этом случае они должны быть легко поправимы и немногочисленны.
Модифицируемость. Внесение изменений не должно вызывать сложностей и приводить к появлению ошибок.
Другие важные характеристики качественного кода – это документированность, наличие комментариев и лаконичность. Совокупность этих признаков позволяет считать код чистым и красивым – таким, каким он и должен быть.

Почему качество кода так важно
Качество кода напрямую влияет на жизнь продукта после релиза. Если код плохой, то его приходится регулярно исправлять и на этапе создания программы, и после ее релиза. Несомненно, приложение может быть хорошим и востребованным, однако нестабильность работы значительно снижает удовлетворенность пользователей. Если же код хороший, то в дальнейшем даже не участвовавшие в написании кода программисты могут быстро внести правки.

Источник: Cyanide and Happiness

Признаки хорошего кода
Линейность
Все действия, заданные кодом, должны быть последовательными и логичными. Это упрощает работу с ним, позволяя отследить цепочку размышлений разработчика и понять, как должны функционировать процессы программы. Линеаризация состоит из нескольких этапов: выделить главную ветвь алгоритма, вынести ее на наименьший уровень вложенности и рекурсивно повторить с подветвями. Должно получиться что-то такое:

Чистый код проще бутерброда

Краткость
Стоит избегать многочисленных повторов, если их можно объединить одной функцией. Если некоторые части кода не используются, стоит подумать об их удалении, чтобы не усложнять понимание. Не стоит изобретать велосипеды и загромождать ими код. Многие задачи, которые стоят перед программистами, уже давно решены; стоит просто поискать получше.

Наличие комментариев
Комментарии нужны не всегда, однако иногда они необходимы, чтобы специфицировать контракт класса или метода, документировать библиотеку или просто пояснить код. В любом случае, их не должно их быть и слишком много. Они должны объяснять, что и почему делает программа, а не как у нее это выходит.

Ошибки при создании кода
Слишком много кода в комментариях
Иногда перенос блоков кода в комментарии объясняется благими намерениями программистов: мало ли, кому он может понадобиться в будущем. Например, это происходит, когда часть программы полностью переписывается, но перечеркивать проделанную работу жалко – вот она и пылится в комментариях месяцами. Если часть кода можно убрать, то это нужно сделать.

Отсутствие тестов
Разработчик должен не только писать код, но и проверять его функциональность. Регулярное тестирование программы – один из важных факторов ее качества. Если затянуть с этим процессом, то код будет слишком длинным, и поиск багов займет куда больше времени, чем мог бы.

Одержимость производительностью и правильностью
Несомненно, стремление к качественной и продуктивной работе похвально. Однако переработки приводят к выгоранию, а следование эталонам лишает возможности найти более простое и красивое решение. Следовательно, нужно работать со свежей головой и позволять себе отступать от шаблонного понимания того, как правильно писать код. Так разработчик сможет оптимизировать форму и содержание кода и сократить время работы с ним в будущем.

Война с ошибками
Не стоит относиться к ошибкам с ненавистью и яростно бороться с каждой мелочью. Конечно, от багов необходимо избавляться, но этот процесс должен идти на пользу и программе, и программисту. Это позволяет учиться избегать однотипных ошибок в будущем и относиться к коду более внимательно, поэтому стоит запастись терпением и принять эту часть работы с ПО.

Работа над качеством кода в Azoft
Разработка архитектуры
В начале создания кода мы продумываем его архитектуру – структурные элементы, интерфейсы, их взаимодействие и общий архитектурный стиль. Иногда это происходит быстро, но при работе над большими и сложными проектами мы углубляемся в процесс и уделяем внимание всем деталям. Важно, чтобы разработанной архитектуры придерживались все, кто работает над программой. Это позволит выстроить четкую и красивую систему, с которой будет просто и приятно работать.

Рефакторинг
Можно закинуть вещи в шкаф одной большой кучей и поплотнее его закрыть, чтобы ничего не вывалилось, а можно аккуратно разложить все по полочкам. Результат один: вещи внутри, шкаф закрыт. Однако снова доставать и перекладывать вещи будет удобнее во втором случае. Так же и с кодом: если возникает необходимость, мы переписываем его более аккуратным способом, не меняя функционал. Это положительно сказывается на его понимании и снижает количество потенциальных проблем.

Code Review
Код наших младших разработчиков проходит через проверку более опытными специалистами. Это позволяет посмотреть на выполненную работу свежим взглядом, найти зоны роста и, конечно, отладить код. Нередко старшие разработчики анализируют код друг друга, чтобы еще и поделиться опытом. Бывают и ситуации, когда junior-разработчики свежим взглядом смотрят на код опытных коллег и вносят удачные правки. Такая совместная работа позволяет повысить качество и читаемость кода.

Статический анализ
Это автоматическая проверка кода, для которой не требуется выполнение программы. Преимущество статического анализа заключается в том, что он не требует временных затрат людей и отмечает ошибки, которые человек мог пропустить при code review. Благодаря этому мы удваиваем пользу от проверки кода и делаем его более совершенным.

Заключение
Если вы хотите сэкономить деньги и время, которые потратили бы на работу над ошибками после релиза приложения, уделите вниманию качеству кода. Мы в Azoft не понаслышке знаем о том, что такое хороший код, и будем рады показать вам это на живом примере. Пишите на info@azoft.com или оставьте контакты в форме внизу страницы. Мы будем рады сотрудничать с вами!
    </string>

    <string name="nineAdviseToDeveloper">9 Advise.
        9 практических советов для начинающего Android-разработчика.
        Как эффективно учиться и искать первую работу в программировании для Android
09 апреля 2020
5 минут
14413

Автор статьи
Александр Аникин


Здравствуйте, меня зовут Александр, я бывший алкоголик бывший маркетолог и ещё 5 лет назад я не знал ничего о программировании. Возможно, я собрал все ошибки, какие можно, на пути программиста. Я пытался учиться самостоятельно, потом учился на курсах GeekBrains, много читал и, конечно же, много трудился. И теперь хочу поделиться наблюдениями, чтобы вам было проще.

Сегодня спрос на Android-разработчиков превышает предложение. Если вы задумывались над разработкой приложений для смартфонов, сейчас самое время реализовать своё желание. К программированию под Android можно идти разными путями: ниже вы увидите советы, которые, по моему мнению, сократят любой выбранный путь.

Не бойтесь чего-то не знать — это ок.
Платформа Android огромна, не говоря уже о двух языках (Java и Kotlin) и массе дополнительных библиотек и архитектурных решений. Даже если вы выучите всё — каждый год появляется что-то новое, Android не стоит на месте. Вот вам пример того, что можно знать, если учить всё:

Иллюстрация дана для общего взгляда. Каждый синий прямоугольник — это большая тема, а в некоторых ещё можно разглядеть немалое количество подтем.

Можете распечатать эту схему и использовать как подсказку для себя, но ради бога, не пытайтесь всё это знать! Я не встречал ещё ни одного разработчика, который знает сразу всё. Осваивайте только то, что вам нужно в данный момент — это и так будет отнимать у вас много времени. Пополняйте свой багаж постепенно, шаг за шагом, и со временем вы станете экспертом.

Разберитесь в Android Studio.
Это среда разработки, в которой вы будете проводить всё своё рабочее время. Чем эффективнее вы её используете, тем эффективнее будете вы сами. Вы не представляете, сколько времени вы можете сэкономить за месяц, если будете пользоваться только клавиатурой, без мыши! Начните использовать сочетания клавиш: они есть почти для всего, для чего нет — назначьте. На Хабре есть пост о том, как вам может помочь «Студия» в вашей работе.

Ещё в Android Studio есть плагины: File > Settings > Plugins. Они тоже облегчают вашу учёбу и труд. Вот несколько полезных плагинов:

Key Promoter X,
Codota,
Android Methods Count,
ADB Idea,
Android Material Design Icon Generator,
DTO generator,
Code Glance,
JSON to Kotlin Class,
Genymotion.
Но прежде чем устанавливать всё подряд, учтите, что плагины могут замедлить работу Android Studio. Вам нужно понимать реальную пользу и необходимость в каждом плагине (я у себя использую JSON To Kotlin Class ​(JsonToKotlinClass), Key Promoter X, ADB Wi-Fi Connect).

Читайте чужой код.
Уметь разбираться в чужом коде очень важно для разработчика, потому что большую часть своего времени вы будете заниматься именно этим. Более того, читая чужой код хотя бы по полчаса в день, вы узнаете для себя много нового, не сомневайтесь. В блоге Aritra Roy можно найти несколько интересных проектов, которые можно читать на досуге.

Учитесь писать чистый код в соответствии с конвенцией.
Не только вы читаете чужой код, но и ваш код тоже будут читать. Не будьте занозой ниже пояса  — выучить стиль кодирования вам потребуется только один раз, но это даст вам сто плюсов в карму на всю жизнь.

Используйте Git, прямо сейчас!
Не надо постоянно пересохранять своё приложение в бэкапах, не надо отсылать код в архиве — поберегите всем время. Нет ни одной команды в андроид-разработке, которая не использует Git. Он нужен не только для командной разработки, он нужен лично вам.

Не изобретайте колесо — используйте лучшие практики.
Есть набор определённых паттернов и антипаттернов в программировании, набор устоявшихся или наиболее эффективных подходов в решении постоянно повторяющихся задач. Пользуйтесь хорошими наработками и избегайте костылей и плохих решений. Список того, что вам может пригодиться, можно найти на Github.

Для всего есть подходящая библиотека.
Убедитесь в этом сами, просто поискав что-то на Github или Android Arsenal. Но это не значит, что нужно всегда и везде использовать какую-то библиотеку. К выбору всегда нужно подходить с осторожностью. Посмотрите количество положительных оценок (чем больше, тем лучше), посмотрите, что ещё сделал автор, проверьте наличие проблем в отдельной секции. Всё это даст вам понимание, стоит использовать библиотеку или нет. Ведь в итоге вам нужно надёжное приложение без багов — учитывайте это в первую очередь.

Старайтесь постоянно иметь собственный мини-проект под рукой.
Они называются по-разному: pet-project, side-project, личный проект, playground, мини-проект. Это то, что вы делаете для себя, какое-то небольшое приложение, на котором вы тренируетесь или смотрите, как что работает, тестируете какие-то новые концепции или библиотеки. Так вы понимаете гораздо лучше и больше, чем если просто о чём-то читаете или слышите.

Возьмите за правило постоянно учиться.
Узнавайте что-то новое или интересное каждую неделю. Это не обязательно должно быть что-то большое, важное или сложное. Просто что-то новое. Или составьте список того, что вы не знаете и вычёркивайте из него что-то каждую неделю, или подпишитесь на какие-то каналы. Вот список того, на что подписан лично я:

Крупнейший русскоязычный портал про разработку. Статьи, новости, подкасты.
Еженедельная рассылка самых читаемых статей по Android-разработке на английском языке (многие статьи можно найти в переводе на apptractor.ru).
Подкаст про Android-разработку на английском.
Прекрасный блог о хороших практиках программирования.
Сборник туториалов — много базовых вещей и объяснение простыми словами.
Официальный блог разработчиков Android.
Это не значит, что вам нужно читать это все, выберите для начала что-то одно.

Идите к своей цели и вы к ней придёте. Поверьте, в этом нет ничего невозможного, если идти к ней каждый день, даже маленькими шажками.

И в качестве бонуса — как найти свою первую работу Android-разработчиком.

Сделайте небольшое, но образцовое, с вашей точки зрения, приложение.
Часто перед собеседованием просят показать какой-нибудь свой код, если он есть. Потому что множество вопросов отпадут сами собой, если его посмотреть — собеседование может и не понадобиться или оно будет формальным. Пара приложений на Github всегда вам пригодятся. Поэтому, если вы хотите стать Android-разработчиком, — начните с приложения, ведь практика наше всё.

Умейте отвечать на простые вопросы.
Ваше резюме будет пустым, поэтому для начала вам будут задавать базовые вопросы по платформе и языку: коллекции, ООП, SOLID, многопоточность, компоненты Android, фрагменты, жизненный цикл, кастомные вью, Dagger, RxJava.

Изучите возможности стажировки и обучения в крупных компаниях.
Я не говорю только про студентов, этот совет касается всех. Я точно знаю, что Сбербанк, Яндекс и Тинькофф проводят подготовительные курсы по три-четыре месяца для тех, кто уже хоть как-то умеет программировать. Условия разные, вплоть до оплаты проезда и проживания. Многие проходят отбор и устраиваются работать в лучших компаниях с лучшими условиями на рынке. Это не так сложно, как вам может показаться.

Ничего страшного, если вам не сделали оффер.
Просите фидбэк или в идеале поговорите немного с тем, кто вас собеседовал. Это поможет вам лучше подготовиться к следующему собеседованию. Отказ даёт вам не меньше опыта, чем успешно пройденное собеседование. Часто в ту же компанию можно будет пройти собеседование повторно через некоторое время.

И напоследок. Изучить Android-разработку можно и самостоятельно, но если вы хотите как можно быстрее добиться результата — пройдите все курсы и сдайте все домашние задания на факультете Android-разработки. После этого у вас будет и портфолио из нескольких приложений, и опыт разработки (в том числе и командной), и все необходимые знания. Именно таких людей и ищут все крупные компании на позицию Junior-разработчика.</string>

    <string name="typical_mistakes">Typical mistakes.

        Типичные ошибки начинающего Android-разработчика.
        Что не нужно делать, чтобы эффективно развиваться с самого начала пути
26 августа 2020
5 минут
12551

Автор статьи
Александр Аникин

Уже давно спрос на Android-разработчиков превышает предложение. И такое положение сохранится ещё как минимум несколько лет. Если вы задумываетесь о работе, которая актуальна и в кризис, и в нормальной экономической обстановке, — сейчас самое время освоить её.

Ещё пять лет назад я ничего не знал ни о разработке под Android, ни о программировании вообще. И за это время успел набить много шишек и совершить достаточно ошибок — от них и постараюсь вас уберечь в этой статье. Расскажу, в чём заблуждаются новички и как этого избежать.

«Со всем разберёмся самостоятельно»
Если считаете, что способны сами разложить по полочкам учебный материал и вникнуть в любой код, — это здорово. Наверное, вы готовы тратить сутки на то, чтобы найти баг или рабочее решение, шерстить интернет и пробовать всё, что только приходит в голову, пока код не заработает. Это похвальное упорство, но лучше его применять так, чтобы получать новые знания, а не до бесконечности искать решения, которые уже миллион раз нашли до вас.

В большинстве случаев новичкам просто не хватает опыта, чтобы понять, какое из найденных в интернете решений оптимальное и почему. Задавайте вопросы об этом в чатах и на форумах, советуйтесь со знакомыми программистами и своим наставником. Поверьте, вы сэкономите много времени, которое можете использовать для дальнейшего обучения. С опытным ментором вы растёте на порядок быстрее, чем самостоятельно.

«Страшно чего-то не знать»
В английской культуре есть понятие, популярное в программистской среде: Fear Of Missing Out (FoMo), или «страх упустить что-то важное». Андроид — огромная система. Вы не сможете даже за пять лет изучить её досконально. Во-первых, платформа постоянно развивается и меняется. Во-вторых, чем больше вы узнаёте, тем больше видите соприкасающихся областей, в которых вы ещё не разбираетесь.

Для начинающего разработчика совершенно нормально не до конца понимать даже какие-то элементарные вещи. У меня есть коллеги, которые программируют всю жизнь, и даже они знают далеко не всё — их тоже можно удивить. Ваша задача не изучить область полностью, а узнать то, что поможет вам в работе именно сейчас. И последовательно расширять свои знания в ходе практики.

«Дизайн не нужен»
«Я же разработчик, мне нужно кодить хорошо, а как будет выглядеть интерфейс и навигация — это не ко мне, а к дизайнерам». Знакомый ход мыслей? Чем больше вы понимаете в материальном дизайне (руководство для дизайна Android-приложений), тем лучше вы знаете возможности платформы как разработчик — и тем яснее представляете, как сделать хорошее приложение. Вам не нужно уметь красиво рисовать иконки (для этого есть множество ресурсов), но понимать принципы важно.

На сайте Google, посвящённом материальному дизайну, много материалов, с которыми стоит ознакомиться

«Я пользуюсь мышкой — и это очень удобно»
Поверьте мне на слово: без мышки вы пишете код значительно быстрее. То есть вы более продуктивны. Используя мышь в процессе программирования, вы постоянно переносите руку с неё на клавиатуру и обратно, а также тратите время, чтобы каждый раз адаптироваться к этим двум устройствам. В любой среде разработки есть комбинации клавиш для всего, что вам может понадобиться, а наиболее удобные сочетания зарезервированы для самых частых операций. Когда вы перестанете пользоваться мышкой при программировании — станете по-настоящему продуктивны. Помочь в этом может вот этот плагин для Android Studio.

«Объять необъятное — легко!»
Итак, вы хотите написать своё первое приложение, вы думали о нём давно. И время пришло! В вашем приложении должен быть чат (куда без него), просмотр видео, аудиоплеер (это же так удобно), карты с навигацией (они всегда пригодятся), ну и заметки (это вообще очевидно).

Остановитесь! Такое приложение не только потребует от вас усилий на протяжении года (а то и больше), но и со временем превратится в «чудовище Франкенштейна». Потому что вы не просто будете писать приложение, но и учиться на нём, постоянно переписывать, оптимизировать и улучшать. А через полгода, с высоты полученного опыта, вы вообще захотите переделать всё с нуля.

Начните с малого. Напишите простой таймер Pomodoro, который идеально подойдёт именно вам, и сделайте так, чтобы он продолжал корректно работать при повороте экрана. Поверьте, уже на этом этапе вас ждёт много открытий. Выложите его в Google Play, прикрутите оплату и рекламу (ещё больше нового!), пройдите все этапы от начала разработки до её завершения и поддержки приложения.

Потом напишите простое приложение-чат, просто для текста. Выложите. Добавьте обмен фотографиями, а затем ещё что-нибудь. Следом сделайте простое приложение для прослушивания музыки… Поняли идею? Так у вас появятся законченные проекты, а через год-полтора вы будете готовы приступить к своему идеальному приложению.

«Пришла идея новой функции — скорее писать!»
Прежде чем реализовывать новую функцию, поищите информацию о ней. Скорее всего, нечто подобное уже написано — и там учтены все возможные ошибки. Так что не изобретайте колесо. Вы можете писать функции и сами, но всегда лучше знать, что есть уже работающий код под рукой. Иногда это экономит много времени и нервов.

Например, в Android Arsenal или GitHub содержатся почти все когда-либо созданные Android-библиотеки. И их код есть в свободном доступе. Проверьте.

Дополнительный совет: выбирайте библиотеки грамотно. Проверьте, какой рейтинг у библиотеки. Посмотрите, если у её создателя ещё популярные работы. И проверьте обсуждения, отзывы. Не все библиотеки написаны хорошо.

«У меня нет времени разбирать чужой код»
Программисты (и Android-разработчики в том числе) тратят больше времени на чтение чужого кода, чем на создание своего. Даже ваш собственный код, написанный три месяца назад, покажется вам чужим. Налейте кофе, сядьте и откройте хорошие примеры кода, поразбирайтесь часок. Если делать это регулярно, вы не только научитесь бегло читать чужой код (что очень важно), но и впитаете лучшие практики. Ведь одна из самых замечательных вещей в Android — это полная открытость платформы. Вот список очень неплохих библиотек, а здесь — перечень Android-приложений с открытым кодом, разбитый по категориям.

«Вот заработаю много денег — куплю мощный ПК»
Купите его сейчас — и сэкономите, и быстро окупится. Большую часть дня вы работаете за компьютером. Это ваш основной, главный и единственный инструмент. На слабом ПК проект собирается в разы дольше, среда работает медленнее, открытый браузер замедляет всю систему… Всё это сказывается не только на вашей производительности, когда в течение года минуты ожидания складываются в недели. Это влияет и на общую отдачу от работы, на эмоциональное состояние — вы просто получаете меньше удовольствия от программирования, чем могли бы. А это важнее всего остального, вместе взятого.

Да, не у всех есть такая возможность — сразу купить крутой ПК. Но держите эту мысль в голове и понимайте все преимущества мощного компьютера перед слабым.

В заключение отойду от формата вредных советов — дам полезный прямо. Начните отдавать знания, которые вы получили. Нет ничего лучше для понимания темы, чем попытка объяснить её кому-то. Пишите в блог, выступайте на митапах, преподавайте. Вы сразу почувствуете, насколько полезнее пересказать статью кому-то, чем просто прочитать её. Кто знает, может, вам понравится — и вы вернётесь в GeekBrains уже как преподаватель. Так сделали уже многие специалисты, и я в их числе.

Удачи, и не повторяйте чужих ошибок!
    </string>

    <string name="health_programmer">
        «В здоровом теле — здоровый программист». Как занятия спортом влияют на качество кода.

Все мы знаем поговорку «В здоровом теле — здоровый дух», которая гласит нам, что быть здоровым физически — ключ к здоровью духовному. Сегодня я попробую интерпретировать это высказывание немного в другом ключе: «В здоровом теле — здоровый программист». Каким образом занятия в спортзале или увлечение каким-либо другим видом спорта может оказать положительное влияние на наш разум, на здоровье мозга и, соответственно, на усвоение информации и правильное ее использование, а отсюда — и на эффективность в написании кода?

Укрепляя свое физическое состояние, мы начинаем чувствовать себя лучше, нормализуется гормональный фон, повышается настроение. После занятия разными упражнениями мышцы обретают тонус, мы перестаем думать о том, что что-то болит, и так без напряжения и раздраженности мы можем больше времени уделить размышлению и работе над определенными задачами. Конечно, все это относится и к здоровью нашего мозга: формируются новые нейронные связи, что, в свою очередь, приводит к способности запоминать больше информации, творить, обучаться, а, соответственно, и писать красивый и качественный код

Для того, чтобы быть максимально продуктивным как в личной жизни, так и на работе, нужно быть полностью погруженным в определенную задачу, решаемую в данный момент. Так вот занятия как раз, избавляя от проблем со здоровьем, и дают нам возможность сконцентрироваться на первоочередных задачах. Все мы знаем, как обычная простуда просто убивает любое желание что-либо делать, не говоря уже о саморазвитии и работе. Но мало кто задумывался над тем, что физические упражнения повышают иммунитет.

Спортзал является хорошим антидепрессантом: выливая гнев или злобу на железо, мы автоматически становимся добрее и веселее) Да и результат в виде подтянутого тела, который придет со временем и не даст о себе забыть, окажет далеко не последнее воздействие на хорошее настроение и уверенность в себе. Все это вкупе дает нам преимущество, как в творческом плане: чувствуя себя лучше, мы можем креативно и без лени подходить к архитектурным вопросам построения, так и работы в целом — будь то продуктивные скрам митинги с командой, или оптимальное решение отдельной задачи.


И так, мы подошли к тому, что занятия спортом — это максимально хорошо как для нашего здоровья, так и для эффективности работы. Но остается вопрос: что же нужно делать. Конечно же, ответ будет составной.

В первую очередь, давайте разберемся со временем. Как организовать график, чтобы нам его хватало на все. Растягивать тренировку на два, а то и три часа как нецелесообразно, так и расточительно, да и вообще максимальный пик производительности организма на тренировке — это 40-50 минут. Я выделяю это время или утром, до работы, или вечером, после, в зависимости от загруженности и желания поспать. Если вы жаворонок, то заниматься можно утром, тем самым экономя вечернее время для работы или просто для отдыха, но и также неплохо заниматься вечером, если вы сова — после такой тренировки сон будет еще слаще.

Также нам нужно разобраться с видами нагрузки. Нагрузка бывает анаэробная и аэробная. Первый случай относится к занятию с разными отягощениями: гантели, штанги, второй — это бег, езда на велосипеде, и все, что заставляет наc много дышать. Естественно, заниматься стоит обеими видами нагрузки, но в соответствии с пожеланиями определять верное соотношение.

Так как нашей целью является улучшение физического состояния в целом, которое повлияет и на наше умственное, я бы рекомендовал заниматься три раза в неделю, чтобы успеть восстановиться от занятия к занятию. Скажем, в понедельник, среду и пятницу, выделить две тренировки на анаэробную нагрузку и одну на аэробную, что позволит достичь оптимального соотношения и целей, которые мы описывали выше. Мой график тренировок как раз состоит из трех дней в неделю: в первый день я занимаюсь проработкой мышц груди и рук, в следующий — мышц ног, а также выделяю 15 -20 минут на пробежку на беговой дорожке и последний день отвожу на плечи и спину. Такая программа позволила мне набрать в самом начале тренировок четыре килограмма чистой мышечной массы.

Конечно, вам стоит записаться в спортзал. Если нет такой возможности сейчас, можно ограничиться занятиями с турником и брусьями, что на первое время тоже довольно неплохо. Но у спортзала есть преимущество — это тренер, который сможет составить не только индивидуальную программу тренировок, но и рассмотреть немаловажный вопрос правильного питания.

Подводя итоги нашей небольшой беседы, можно резюмировать: занятия спортом полезны в любом отношении, особенно для наших с вами задач — быть эффективным программистом, достигать своих целей и всегда быть на вершине успеха.
    </string>

    <string name="rules_tag">Rules</string>
    <string name="advice_tag">Advices</string>
    <string name="health_tag">Health</string>
    <string name="solid_head">S.O.L.I.D</string>
    <string name="clean_head">Clean</string>
    <string name="advice_head">Advice</string>
    <string name="mistake_head">Errors</string>
    <string name="health_head">Health</string>
    <string name="generate_an_event">generate an event</string>
    <string name="filter">filter</string>
    <string name="articles">Articles</string>
    <string name="dialog_window">Select a topic for the article</string>
    <string name="articles_description">Articles description</string>

</resources>
