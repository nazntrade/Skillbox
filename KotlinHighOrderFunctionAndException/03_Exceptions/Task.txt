Задача
Цели задания
Научиться создавать собственные исключения.
Закрепить на практике работу с исключениями.


Часть 1 (обязательная)


Что нужно сделать
Необходимо написать приложение, имитирующее данные датчика колеса. Автомобильные колёса нужно накачивать строго до определённого давления. При превышении или занижении значения программа должна выбрасывать и обрабатывать соответствующие исключения.

Нормальным давлением будем считать значения от 1,6 до 2,5 атмосферы, при которых покрышка не слетит с диска и колесо будет хорошо взаимодействовать с дорогой.

Давление в колесе не может быть отрицательным (вакуум без давления покрышка не держит).

Если давление в колесе превысит 10 атмосфер — оно взорвётся. Таким образом, мы можем накачать колесо от 0 до 10 атмосфер, а допустимыми значениями для эксплуатации будем считать значения от 1,6 до 2,5 атмосфер.



    1. Создайте классы исключений: 

TooHighPressure (для слишком высокого давления);
TooLowPressure (для слишком низкого давления);
IncorrectPressure (для недопустимого давления: отрицательное или превышающее 10 атмосфер).


    2. Создайте класс колеса Wheel.

        Свойства:

текущее давление.
        Функции:

накачать колесо до определённого давления (если подаваемое давление недопустимо, функция выбрасывает соответствующее исключение, иначе устанавливает значение для давления);
проверить уровень давления в колесе (если давление не соответствует нормальному, функция выбрасывает исключение).


    3. Напишите программу для тестирования.

Создайте колесо.
Попробуйте задать три разных значения давления через функцию накачки колеса: допустимое давление, нормальное давление, недопустимое давление.
Добавьте обработку исключений. В зависимости от типа ошибки выведите в консоль результат: произошла ли накачка колеса и можно ли его эксплуатировать.


Пример:

При накачке −5 атмосфер процедура не удалась.

При накачке 6 атмосфер процедура удалась. Эксплуатация невозможна — давление превышает нормальное.

При накачке 2 атмосферы процедура удалась. Эксплуатация возможна.



Советы и рекомендации
Подробная информация об исключениях содержится в официальной документации языка и самом описании Throwable.



Часть 2 (самостоятельная)*
* Выполнять это задание можно по желанию.



Что нужно сделать
Необходимо изменить программу из домашнего задания к модулю 11 таким образом, чтобы в ней использовались исключения. 

Уберите проверку на наличие патронов в оружии. Вместо этого воспользуемся исключениями. 



Создайте класс исключения NoAmmoException, которое должно выбрасываться в случае, если в оружии нет необходимого количества патронов для выстрела.
Измените функцию у класса оружия «Получение патронов для выстрела» таким образом, чтобы она выбрасывала исключение, если в оружии недостаточно патронов для совершения выстрела(-ов). Если оружие стреляет очередями (например, по пять выстрелов), в обойме должно находиться достаточное количество патронов (в данном случае — пять).
В классе Warrior уберите проверку на достаточное количество патронов. Вместо этого используйте функцию «Получение патронов для выстрела» и обрабатывайте исключение. В случае исключения — перезарядка оружия и пропуск хода.
Остальная логика программы и отдельных функций не должна измениться.


Советы и рекомендации
При возникновении сложностей обратитесь за помощью к проверяющему преподавателю. 

Вы также можете отправить задание на проверку.

Внесите необходимые изменения в код домашнего задания к модулю 11.
Сделайте коммит в удалённый репозиторий.
В форме ниже напишите преподавателю о необходимости проверки самостоятельной части задания.
Обязательно приложите ссылку к нужной папке в удалённом репозитории.


Что оценивается
Программа запускается, работает корректно и выводит всю необходимую информацию.
Выполнены все пункты обязательной части задания.
Соблюдена инкапсуляция. Доступны только публичные члены классов.
Классы должны быть открытыми для наследования только в случае необходимости.
Методы должны быть открытыми для переопределения только в случае необходимости.
Функции соответствуют принципам чёрного ящика, выполняют атомарные операции и независимы друг от друга.
Функции возвращают неизменяемые коллекции.
Названия компонентов программы отражает их назначение.
Переменные, которые не изменяются в программе, должны быть объявлены неизменяемыми.
Различные выводы в консоль начинаются с новой строки.


Плохо: «Вывод информации 1. Вывод информации 2».

Хорошо:

«Вывод информации 1.

Вывод информации 2».



Как отправить задание на проверку
Используйте репозиторий Kotlin.
Скачайте изменения в репозитории на свой компьютер.
Выполните домашнее задание в папке 12_Exceptions. Создайте проект внутри папки, сделайте коммит или несколько коммитов. Отправьте коммиты в удалённый репозиторий.
Формат сдачи
Перейти на GitLab