class MovieMainFragment : Fragment(R.layout.fragment_main_search_movie) {

    private val viewModel: MoviesViewModel by viewModels()

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding = FragmentMainSearchMovieBinding.bind(view)

        bindViewModel()


    private fun bindViewModel() {
        binding.searchButton.setOnClickListener {
            search()
        }
        viewModel.movies.observe(viewLifecycleOwner) {
            movieAdapter?.items = it
            errorProcessing()

        }
        viewModel.isLoading.observe(viewLifecycleOwner, ::doWhileLoadMovies)
    }
//////////////////////////////////////////////////////////////////////////

class MoviesViewModel : ViewModel() {

    private val repository = MovieRepository()
    private var currentCall: Call? = null
    private val moviesListLiveData = MutableLiveData<List<RemoteMovie>>()
    private val isLoadingLiveData = MutableLiveData<Boolean>()

    val getErrorFromServer: String
        get() = repository.error

    val movies: LiveData<List<RemoteMovie>>
        get() = moviesListLiveData

    val isLoading: LiveData<Boolean>
        get() = isLoadingLiveData


    fun search(queryTitleText: String, queryYearText: String, queryTypeText: String) {
        isLoadingLiveData.postValue(true)
        currentCall =
            repository.searchMovie(queryTitleText, queryYearText, queryTypeText) { movies ->
                isLoadingLiveData.postValue(false)
                moviesListLiveData.postValue(movies)
                currentCall = null
            }
    }

    override fun onCleared() {
        super.onCleared()
        currentCall?.cancel()
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////

class MovieRepository {
    var error = ""
    fun searchMovie(
        queryTitleText: String,
        queryYearText: String,
        queryTypeText: String,
        callback: (List<RemoteMovie>) -> Unit
    ): Call {
        error = ""
        return Network.getSearchMovieCall(queryTitleText, queryYearText, queryTypeText).apply {
            enqueue(object : Callback {  ///enqueue ???///
                override fun onFailure(call: Call, e: IOException) {
                    error = "IOException"
                    Log.e("Server", "IOException")
                    callback(emptyList())
                }

                override fun onResponse(call: Call, response: Response) {
                    error = ""
                    if (response.isSuccessful) {
                        val responseString = response.body?.string().orEmpty()

                        val moshi = Moshi.Builder()
                            .add(JsonCustomAdapter())
                            .build()

                        val adapter = moshi.adapter(RemoteMovie::class.java).nonNull()

                        try {
                            val movies = adapter.fromJson(responseString)
                            Log.d("error", "movie created: $movies")

                            if (movies != null) {
                                callback(listOf(movies))
                            } else Log.d("error", "sorry, the movie is empty")

                        } catch (e: Exception) {
                            Log.e("error", "catch: ${e.message}")
                            error = "JSONException"
                            callback(emptyList())
                        }

                    } else {
                        error = "FailureServerResponse"
                        Log.e("Server", "FailureServerResponse")
                        callback(emptyList())
                    }
                }
            })
        }
    }
}
